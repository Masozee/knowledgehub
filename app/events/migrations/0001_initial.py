# Generated by Django 5.1.1 on 2024-11-08 16:45

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('people', '0011_photobackup_initiated_by_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Event Categories',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(max_length=255)),
                ('venue_name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='events/images/')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', max_length=20)),
                ('max_capacity', models.PositiveIntegerField(help_text='Maximum number of attendees')),
                ('current_capacity', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_organized', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.eventcategory')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker_type', models.CharField(choices=[('keynote', 'Keynote Speaker'), ('guest', 'Guest Speaker'), ('panelist', 'Panelist'), ('moderator', 'Moderator')], max_length=20)),
                ('presentation_title', models.CharField(max_length=200)),
                ('presentation_description', models.TextField()),
                ('speaking_slot_start', models.DateTimeField()),
                ('speaking_slot_end', models.DateTimeField()),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of appearance')),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_speakers', to='events.event')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_speaker_roles', to='people.person')),
            ],
            options={
                'ordering': ['event', 'order', 'speaking_slot_start'],
                'unique_together': {('event', 'person', 'speaking_slot_start')},
            },
        ),
        migrations.CreateModel(
            name='SpeakerAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('attachment_type', models.CharField(choices=[('presentation', 'Presentation'), ('handout', 'Handout'), ('supplementary', 'Supplementary Material')], max_length=20)),
                ('file', models.FileField(upload_to='events/speaker_attachments/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'ppt', 'pptx', 'doc', 'docx'])])),
                ('is_public', models.BooleanField(default=False, help_text='If true, attachment will be visible to all attendees')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('speaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speaker_attachments', to='events.speaker')),
            ],
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity', models.PositiveIntegerField()),
                ('remaining', models.PositiveIntegerField()),
                ('sale_start_date', models.DateTimeField()),
                ('sale_end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_ticket_types', to='events.event')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(editable=False, max_length=100, unique=True)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='tickets/qr_codes/')),
                ('unique_identifier', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('purchase_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('used', 'Used')], default='pending', max_length=20)),
                ('attendee_name', models.CharField(max_length=200)),
                ('attendee_email', models.EmailField(max_length=254)),
                ('is_checked_in', models.BooleanField(default=False)),
                ('checked_in_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tickets', to=settings.AUTH_USER_MODEL)),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.tickettype')),
            ],
        ),
        migrations.CreateModel(
            name='EventReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_reviews', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_reviews_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('event', 'user')},
            },
        ),
    ]
